name: Deploy

on:
  workflow_run:
    workflows: [Terraform Apply]
    types:
      - completed

env:
  AWS_REGION : "us-west-1"
  AWS_DEFAULT_OUTPUT: json

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.4

      - name: Assume AWS IAM Role
        id: configureCreds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with: 
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
        continue-on-error: true

      - name: Assume Role Failure
        if: steps.configureCreds.outcome == 'failure'
        run: |
          echo "job failed"
          aws sts get-caller-identity
          exit 1

      - name: Log in ECR
        id: login-ecr
        # uses: aws-actions/amazon-ecr-login@v2.0.1
        # with:
        #   mask-password: 'true'
        #   registry-type: 'private'
        run: |
          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Check for images
        id: check-images
        run: |
          echo "Checking if ECR repository contains any images..."
          IMAGES=$(aws ecr list-images --repository-name $REPO_NAME --query 'imageIds' --output text | wc -l)
          echo $IMAGES
          if [ "$IMAGES" -eq 0 ]; then
            echo "ECR repository is empty. Building and pushing new image.";
            SHOULD_BUILD="true";
          else
            echo "ECR repository contains images. Checking for latest version...";
            if [ $(git rev-list --count HEAD) -gt 1 ]; then
              if git diff --quiet HEAD~1 HEAD -- app/; then
                echo "No changes in Dockerfile or app. Skipping build."
                SHOULD_BUILD="false";
              else
                echo "Changes detected in Dockerfile or app. Building Docker image..."
                SHOULD_BUILD="true";
              fi
            fi
          fi
          echo "should_build=SHOULD_BUILD" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build-image
        if: steps.check-images.outputs.should_build == 'true'
        run: |
          echo "Building the Docker image...";
          docker build -t ecs-project ./app;
          echo "Finished build";
          FINISHED_BUILD="true";
          echo "finished_build=FINISHED_BUILD" >> $GITHUB_OUTPUT
        
      - name: Post build
        id: post-build
        if: steps.build-image.outputs.finished_build == 'true'
        run: |
          echo "Pushing the Docker image to ECR...";
          docker tag ecs-project:latest ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecs-project:latest;
          docker push ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecs-project:latest;

      - name: Retrieve from S3
        id: retrieve
        run: |
          aws s3api get-object --bucket ${{ secrets.S3_URI }} --key tfstate-ecs.tfstate encoded.tfstate
          base64 -d encoded.tfstate > decoded.tfstate

      - name: Initializa Terraform
        id: init-terraform
        run: terraform init
      
      - name: Apply Terraform
        id: apply-terraform
        run: terraform apply -var='ecs_container_image=${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecs-project:latest' -state=decoded.tfstate --auto-approve